package com.el.cmic.callmdm.mapper;

import com.el.cmic.callmdm.domain.*;
import com.el.cmic.common.domain.MdmDataType;
import com.el.cmic.common.domain.MdmFuncType;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.jdbc.SQL;
import org.exolab.castor.mapping.xml.Sql;
import org.springframework.beans.factory.annotation.Value;

import java.util.List;

/**
 * Created by Vincent on 2016/9/29.
 */
public interface ProductMapper {

    final class SqlProvider extends SQL {

        private final static String PRODUCT_E01_QRY = "productE01Qry";


        public String productE01Qry(@Param("schema") String schema, @Param("dataType") String dataType, @Param("funcType") String funcType) {
            if (funcType.equals(MdmFuncType.FUNC_TYPE_ADD)) {
                return productE01AddQry(schema, dataType);
            } else {
                return productE01ModQry(schema, dataType);
            }

        }

        public String productE01AddQry(@Param("schema") String schema, @Param("dataType") String dataType) {
            String strSchema = schema + ".";
            SELECT("B.IMLITM as productcode");
            SELECT("a.spe8name as productname");
            SELECT("b.imDSC2 as producttype");
            // SELECT("a.Span8 as pk_mfname");
            SELECT("E.KSE8NAME as pk_mfname");
            SELECT("a.Sporig as pk_mfcountry");
            SELECT("a.Spe8jx as form");
            SELECT("b.Imdsc1 as sync");
            SELECT("a.Spe8pzwh as fileno");
            SELECT("b.Imuom1 as pk_weight");
            SELECT("(select c.Sce8scxkz from crpdta.FE841005 c where a.span8 = C.SCAN8 and rownum = 1) as licenseno");
            SELECT("'' as Hibcode");
            SELECT("'' as gmdncode");
            SELECT("'' as gs1code");
            SELECT("d.abac28 As pk_label");
            SELECT("b.Imsrp3 as pk_productclass");
            SELECT("b.Imsrp4 as pk_yltsfl");
            SELECT("a.Spe8yyks AS pk_department");
            FROM(strSchema + "FE84101 a");
            INNER_JOIN(strSchema + "F4101 b on A.SPLITM = B.IMLITM");
            LEFT_OUTER_JOIN(strSchema + "F0101 D ON A.SPAN8 = d.aban8");
            LEFT_OUTER_JOIN(strSchema + "FE80101 E ON A.SPAN8=E.KSAN8");
            WHERE("A.spflag='P'");
            WHERE("Trim(A.SPE8SPXZ)=#{dataType}");
            return toString();
        }

        public String productE01ModQry(@Param("schema") String schema, @Param("dataType") String dataType) {
            String strSchema = schema + ".";
            SELECT("a.SQUKIDP as doco");
            SELECT("a.sqev01 as ev01");
            SELECT("a.sqlitm as productcode");
            SELECT("a.sqe8name as productname");
            SELECT("a.sqdsc2 as producttype");
            // SELECT("b.span8 as pk_mfname");
            SELECT("E.KSE8NAME as pk_mfname");
            SELECT("a.sqorig as pk_mfcountry");
            SELECT("a.sqe8jx as form");
            SELECT("a.sqdsc1 as sync");
            SELECT("a.sqe8pzwh as fileno");
            SELECT("a.squom1 as pk_weight");
            SELECT("a.sqe8scxkz  as licenseno");
            SELECT("'' as Hibcode");
            SELECT("'' as gmdncode");
            SELECT("'' as gs1code");
            SELECT("d.abac28 As pk_label");
            SELECT("a.sqsrp3 as pk_productclass");
            SELECT("a.sqsrp4 as pk_yltsfl");
            SELECT("a.sqe8yyks AS pk_department");
            FROM(strSchema + "FE841001 a");
            LEFT_OUTER_JOIN(strSchema + "FE84101 b on A.sqitm = B.imitm");
            LEFT_OUTER_JOIN(strSchema + "F0101 D ON b.SPAN8 = d.aban8");
            LEFT_OUTER_JOIN(strSchema + "FE80101 E ON A.SQAN8=E.KSAN8");
            WHERE("A.sqflag='P'");
            WHERE("Trim(A.SqE8SPXZ)=#{dataType}");
            return toString();
        }

        private final static String PRODUCT_E02_QRY = "productE02Qry";

        public String productE02Qry(@Param("schema") String schema, @Param("dataType") String dataType, @Param("funcType") String funcType) {

            if (funcType.equals(MdmFuncType.FUNC_TYPE_ADD)) {
                return productE02AddQry(schema, dataType);
            } else {
                return productE02ModQry(schema, dataType);
            }

        }

        public String productE02AddQry(@Param("schema") String schema, @Param("dataType") String dataType) {
            String strSchema = schema + ".";
            SELECT("B.IMLITM as productcode");
            SELECT("a.spe8name as productname");
            SELECT("b.imDSC2 as producttype");
            //SELECT("a.Span8 as pk_mfname");
            SELECT("E.KSE8NAME as pk_mfname");
            SELECT("a.Sporig as pk_mfcountry");
            SELECT("a.Spe8jx as form");
            SELECT("b.Imdsc1 as sync");
            SELECT("a.Spe8pzwh as fileno");
            SELECT("b.Imuom1 as pk_weight");
            SELECT(" A.SPE8ZDYL AS pk_zdypdl");
            SELECT(" A.SPE8JHG AS pk_jhg");
            SELECT(" A.SPE8ZTW AS pk_ztw");
            SELECT(" A.SPE8GFG AS pk_fgjyw");
            SELECT(" A.SPE8PTYP AS pk_ptyp");
            SELECT(" '' AS basecode");
            SELECT(" '' AS customscode");
            SELECT(" '' AS atccode");
            SELECT(" '' AS atcname");
            SELECT(" A.SPE8ATCDL AS pk_atcdl");
            SELECT(" A.SPE8ATCXL AS pk_atcxl");
            SELECT(" '' AS pk_atcxl");

            FROM(strSchema + "FE84101 a");
            INNER_JOIN(strSchema + "F4101 b on A.SPLITM = B.IMLITM");
            LEFT_OUTER_JOIN(strSchema + "F0101 D ON A.SPAN8 = d.aban8");
            LEFT_OUTER_JOIN(strSchema + "FE80101 E ON A.SPAN8=E.KSAN8");
            WHERE("A.spflag='P'");
            WHERE("Trim(A.SPE8SPXZ)=#{dataType}");
            return toString();
        }

        public String productE02ModQry(@Param("schema") String schema, @Param("dataType") String dataType) {
            String strSchema = schema + ".";
            SELECT("a.sqdoco as doco");
            SELECT("a.sqev01 as ev01");
            SELECT("a.sqlitm as productcode");
            SELECT("a.sqe8name as productname");
            SELECT("a.sqdsc2 as producttype");
            //SELECT("b.span8 as pk_mfname");
            SELECT("E.KSE8NAME as pk_mfname");
            SELECT("a.sqorig as pk_mfcountry");
            SELECT("a.sqe8jx as form");
            SELECT("a.sqdsc1 as sync");
            SELECT("a.sqe8pzwh as fileno");
            SELECT("a.squom1 as pk_weight");
            SELECT(" a.sqe8zdyl AS pk_zdypdl");
            SELECT(" a.sqe8jhg AS pk_jhg");
            SELECT(" a.sqe8ztw AS pk_ztw");
            SELECT(" a.sqe8gfg AS pk_fgjyw");
            SELECT(" a.sqe8ptyp AS pk_ptyp");
            SELECT(" '' AS basecode");
            SELECT(" '' AS customscode");
            SELECT(" '' AS atccode");
            SELECT(" '' AS atcname");
            SELECT(" a.sqe8atcdl AS pk_atcdl");
            SELECT(" a.sqe8atcxl AS pk_atcxl");
            SELECT(" '' AS pk_atcxl");

            FROM(strSchema + "FE841001 a");
            INNER_JOIN(strSchema + "FE84101 b on A.sqitm = B.imitm");
            LEFT_OUTER_JOIN(strSchema + "F0101 D ON b.SPAN8 = d.aban8");
            LEFT_OUTER_JOIN(strSchema + "FE80101 E ON A.SQAN8=E.KSAN8");
            WHERE("a.sqflag='P'");
            WHERE("Trim(a.SqE8SPXZ)=#{dataType}");
            return toString();
        }

        private final static String PRODUCT_E03_QRY = "productE03Qry";

        public String productE03Qry(@Param("schema") String schema, @Param("dataType") String dataType, @Param("funcType") String funcType) {

            if (funcType.equals(MdmFuncType.FUNC_TYPE_ADD)) {
                return productE03AddQry(schema, dataType);
            } else {
                return productE03ModQry(schema, dataType);
            }
        }

        public String productE03AddQry(@Param("schema") String schema, @Param("dataType") String dataType) {
            String strSchema = schema + ".";
            SELECT("B.IMLITM as productcode");
            SELECT("a.spe8name as productname");
            SELECT("b.imDSC2 as producttype");
            //SELECT("a.Span8 as pk_mfname");
            SELECT("F.KSE8NAME as pk_mfname");
            SELECT("a.Sporig as pk_mfcountry");
            SELECT("b.Imdsc1 as sync");
            // SELECT("a.Spe8jx as form");
            SELECT(" A.SPE8JHG AS pk_jhg");
            SELECT(" A.SPE8ZTW AS pk_ztw");
            SELECT(" E.IVCITM AS interbarcode");
            SELECT(" B.IMSRP3 AS pk_productclass");
            SELECT(" B.IMSRP4 AS pk_yltsfl");
            FROM(strSchema + "FE84101 a");
            INNER_JOIN(strSchema + "F4101 b on A.SPLITM = B.IMLITM");
            LEFT_OUTER_JOIN(strSchema + "F0101 D ON A.SPAN8 = d.aban8");
            LEFT_OUTER_JOIN(strSchema + "F4104 E ON E.IVLITM=B.IMLITM AND TRIM(IVXRT)='IBC'");
            LEFT_OUTER_JOIN(strSchema + "FE80101 F ON A.SPAN8=F.KSAN8");
            WHERE("A.spflag='P'");
            WHERE("Trim(A.SPE8SPXZ)=#{dataType}");
            return toString();
        }

        public String productE03ModQry(@Param("schema") String schema, @Param("dataType") String dataType) {
            String strSchema = schema + ".";
            SELECT("a.sqdoco as doco");
            SELECT("a.sqev01 as ev01");
            SELECT("a.sqlitm as productcode");
            SELECT("a.sqe8name as productname");
            SELECT("a.sqdsc2 as producttype");
            //SELECT("b.span8 as pk_mfname");
            SELECT("F.KSE8NAME as pk_mfname");
            SELECT("a.sqorig as pk_mfcountry");
            SELECT("a.sqdsc1 as sync");
            SELECT(" a.sqe8jhg AS pk_jhg");
            SELECT(" a.sqe8ztw AS pk_ztw");
            SELECT(" E.IVCITM AS interbarcode");
            SELECT(" a.sqsrp3 AS pk_productclass");
            SELECT(" a.sqsrp4 AS pk_yltsfl");
            FROM(strSchema + "FE841001 a");
            INNER_JOIN(strSchema + "FE84101 b on A.sqitm = B.imitm");
            LEFT_OUTER_JOIN(strSchema + "F0101 D ON b.SPAN8 = d.aban8");
            LEFT_OUTER_JOIN(strSchema + "F4104 E ON E.IVLITM=B.IMLITM AND TRIM(IVXRT)='IBC'");
            LEFT_OUTER_JOIN(strSchema + "FE80101 F ON A.SqAN8=F.KSAN8");
            WHERE("A.sqflag='P'");
            WHERE("Trim(A.SqE8SPXZ)=#{dataType}");
            return toString();
        }

        private final static String PRODUCT_E04_QRY = "productE04Qry";


        public String productE04Qry(@Param("schema") String schema, @Param("dataType") String dataType, @Param("funcType") String funcType) {
            if (funcType.equals(MdmFuncType.FUNC_TYPE_ADD)) {
                return productE04AddQry(schema, dataType);
            } else {
                return productE04ModQry(schema, dataType);
            }
        }

        public String productE04AddQry(@Param("schema") String schema, @Param("dataType") String dataType) {
            String strSchema = schema + ".";
            SELECT("B.IMLITM as productcode");
            SELECT("a.spe8name as servicename");
            FROM(strSchema + "FE84101 a");
            INNER_JOIN(strSchema + "F4101 b on A.SPLITM = B.IMLITM");
            LEFT_OUTER_JOIN(strSchema + "F0101 D ON A.SPAN8 = d.aban8");
            WHERE("A.spflag='P'");
            WHERE("Trim(A.SPE8SPXZ)=#{dataType}");
            return toString();
        }

        public String productE04ModQry(@Param("schema") String schema, @Param("dataType") String dataType) {
            String strSchema = schema + ".";
            SELECT("a.sqdoco as doco");
            SELECT("a.sqev01 as ev01");
            SELECT("a.sqlitm as productcode");
            SELECT("a.spe8name as servicename");
            FROM(strSchema + "FE841001 a");
          /*  INNER_JOIN(strSchema + "F4101 b on A.SPLITM = B.IMLITM");
            LEFT_OUTER_JOIN(strSchema + "F0101 D ON A.SPAN8 = d.aban8");*/
            WHERE("A.sqflag='P'");
            WHERE("Trim(A.SqE8SPXZ)=#{dataType}");
            return toString();
        }

        private final static String PRODUCT_QRY_B_INFO = "productQryBInfo";

        public String productQryBInfo(@Param("schema") String schema, @Param("litm") String litm) {
            String strSchema = schema + ".";
            SELECT(" A.ZZE8ZZLXA AS pk_licensetype");
            SELECT("A.ZZE8ZZBM AS licenseno");
            SELECT("A.ZZEXDJ AS todate");
            SELECT("B.SPE8FXDJ AS fxdj");
            SELECT("'' AS iscqyx");
            SELECT("B.SPE8CCTJ AS cctj");
            SELECT("B.SPE8QTCC AS qtcctj");
            SELECT("'' AS pk_productclass");
            SELECT("B.SPE8JGG AS pk_jgg");
            FROM(strSchema + "FE84101Z A");
            INNER_JOIN(strSchema + "FE84101 B  ON A.ZZLITM = B.SPLITM");
            WHERE("A.ZZLITM =#{litm}");

            return toString();
        }
    }


    @SelectProvider(type = SqlProvider.class, method = SqlProvider.PRODUCT_E01_QRY)
    List<RqE001InputProductE01> productE01QryInfo(@Param("schema") String schema, @Param("dataType") String dataType, @Param("funcType") String funcType);

    @SelectProvider(type = SqlProvider.class, method = SqlProvider.PRODUCT_E02_QRY)
    List<RqE001InputProductE02> productE02QryInfo(@Param("schema") String schema, @Param("dataType") String dataType, @Param("funcType") String funcType);

    @SelectProvider(type = SqlProvider.class, method = SqlProvider.PRODUCT_E03_QRY)
    List<RqE001InputProductE03> productE03QryInfo(@Param("schema") String schema, @Param("dataType") String dataType, @Param("funcType") String funcType);

    @SelectProvider(type = SqlProvider.class, method = SqlProvider.PRODUCT_E04_QRY)
    List<RqE001InputProductE04> productE04QryInfo(@Param("schema") String schema, @Param("dataType") String dataType, @Param("funcType") String funcType);

    /**
     * 根据商品编码查找商品注册证等信息
     *
     * @param litm 商品编码
     * @return
     */
    @SelectProvider(type = SqlProvider.class, method = SqlProvider.PRODUCT_QRY_B_INFO)
    List<RqE001InputBE01> productQryBInfo(@Param("schema") String schema, @Param("litm") String litm);
}
