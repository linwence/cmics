package com.el.cmic.service.goods.impl;

import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.xml.rpc.ServiceException;

import com.el.cmic.common.domain.Fe8spdlg;
import com.el.cmic.common.domain.Ve8spd0099;
import com.el.cmic.common.service.Ve8spd0099Service;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.el.cmic.common.SpdInterfaceType;
import com.el.cmic.common.domain.SpdData;
import com.el.cmic.common.domain.SpdResult;
import com.el.cmic.domain.goods.Bale;
import com.el.cmic.mapper.goods.BaleMapper;
import com.el.cmic.service.goods.BaleService;
import com.el.cmic.service.validate.FE8SPD00Service;
import com.el.utils.SpdClientService;

/**
 * 商品主数据接口
 */
@Service
public class BaleServiceImpl implements BaleService {

    Logger logger = Logger.getLogger(BaleServiceImpl.class);
    @Autowired
    private BaleMapper baleMapper;

    //@Value("${spd.ID}")
    //private String spdId;


    @Resource(name = "spdClientService")
    private SpdClientService spdClientService;

    @Autowired
    private FE8SPD00Service fE8SPD00Service;
    @Autowired
    private Ve8spd0099Service ve8spd0099ServiceImpl;

    /**
     * 商品基础数据推送  查询list
     *
     * @return
     */
    @Override
    public List<Bale> selectBales() {
        return baleMapper.selectBales();
    }

    /**
     * FE8SPD01 EV01  更新状态
     *
     * @return
     */
    @Override
    @Transactional
    public Integer updateEv01(String status, String spitm, String spdid) {
        return baleMapper.updateEv01(status, spitm, spdid);
    }


    /**
     * 商品基础数据推送   入口
     */
    @Override
    public void callBaleInterface() {
        List<Bale> baleList = new ArrayList<Bale>();
        try {


            baleList = this.selectBales();
            for (Bale bale : baleList) {
                //List<Ve8spd0099> ve8spd0099List = ve8spd0099ServiceImpl.selectByCo(bale.getCo());
                Ve8spd0099 ve8spd0099 = null;
                try {
                    ve8spd0099 = ve8spd0099ServiceImpl.selectByCoAndSpdId(bale.getCo(), bale.getSpdbs());
                    if (null == ve8spd0099) {
                        continue;
                    }
                    //bale.setSpdbs(ve8spd0099.getSpdid());////设置spd标识
                    SpdData spdData = new SpdData(SpdInterfaceType.BALE_TYPE, ve8spd0099.getSpdid(), bale, "明细");
                    //生成data数据
                    String data = spdData.toJson();
                    Fe8spdlg fe8spdlg = new Fe8spdlg();
                    fe8spdlg.setLge8cgdd(bale.getLitm());//订单号
                    fe8spdlg.setLge8qglx("");//订单类型
                    fe8spdlg.setLge8erpid(bale.getCo());//配送机构编码
                    fe8spdlg.setLge8rzlx("INFO");//日志类型
                    fe8spdlg.setLge8rzfx("TOSPD");//日志方向
                    fe8spdlg.setLge8jkmc(SpdInterfaceType.BALE_TYPE);//接口名称
                    fe8spdlg.setLge8rznr(data);//日志内容
                    fe8spdlg.setLge8spdid(bale.getSpdbs());//SPD系统标识
                    fe8spdlg.setLge8spdurl(ve8spd0099.getSpdurl());//SPD URL
                    //调用webservice提供的接口
                    SpdResult spdResult = spdClientService.callSpdWebService(data, ve8spd0099.getAppkey(), ve8spd0099.getApppassword(),
                            ve8spd0099.getSpdurl(), ve8spd0099.getSpdnamespace(), ve8spd0099.getSpdver(), fe8spdlg);

                    //System.out.print("接口测试结果:");
                    //System.out.println(spdResult);
                    afterResponse(bale, spdResult);
                } catch (RemoteException ex) {
                    ex.printStackTrace();
                    logger.error("调用[" + SpdInterfaceType.BALE_TYPE + "]失败,无法访问webservice;[url]"
                            + ve8spd0099.getSpdurl() + ";商品项目号[" + bale.getLitm() + "];[错误信息]:" + ex.getMessage());
                } catch (UnsupportedEncodingException ex) {
                    ex.printStackTrace();
                    logger.error("调用[" + SpdInterfaceType.BALE_TYPE + "]失败,不支持的编码;商品项目号[" + bale.getLitm() + "];[错误信息]:" + ex.getMessage());
                } catch (ServiceException ex) {
                    ex.printStackTrace();
                    logger.error("调用[" + SpdInterfaceType.BALE_TYPE + "]失败,webservice服务异常;[url]"
                            + ve8spd0099.getSpdurl() + ";商品项目号[" + bale.getLitm() + "];[错误信息]:" + ex.getMessage());

                } catch (MalformedURLException ex) {
                    ex.printStackTrace();
                    logger.error("调用[" + SpdInterfaceType.BALE_TYPE + "]失败,Url地址异常;[url]"
                            + ve8spd0099.getSpdurl() + ";商品项目号[" + bale.getLitm() + "];[错误信息]:" + ex.getMessage());

                } catch (Exception ex) {
                    ex.printStackTrace();
                    logger.error("调用[" + SpdInterfaceType.BALE_TYPE + "]失败，" +
                            "部门编码[" + bale.getLitm() + "],[错误信息]:" + ex.getMessage());
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            logger.error("调用[" + SpdInterfaceType.BALE_TYPE + "]失败，[错误信息]:" + ex.getMessage());
        }
    }

    public void afterResponse(Bale bale, SpdResult spdResult) {
        String status = "Y";
        //接口调用不成功  更新状态
        if (!spdResult.isSuccess()) {
           // status = "E";
            status = "N";
        }
        //此字段  字段补齐了Nchar  长度   否则 更新不成功
        updateEv01(status, bale.getLitm(), bale.getSpdbs());
    }

}
