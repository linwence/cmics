/**
 * 
 */
package com.el.cmic.service.inbound;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.el.cfg.domain.F4211;
import com.el.cfg.domain.F4311;
import com.el.cmic.common.BillType;
import com.el.cmic.common.WmsInterfaceType;
import com.el.cmic.common.domain.WmsData;
import com.el.cmic.common.domain.WmsRequest;
import com.el.cmic.common.domain.WmsResult;
import com.el.cmic.domain.inbound.InboundPush;
import com.el.cmic.domain.inbound.InboundPushDetail;
import com.el.cmic.domain.inbound.InboundPushSerial;
import com.el.cmic.mapper.inbound.InboundBackMapper;
import com.el.cmic.mapper.inbound.InboundF4211Mapper;
import com.el.cmic.mapper.inbound.InboundF4311Mapper;
import com.el.cmic.mapper.inbound.InboundPushDetailMapper;
import com.el.cmic.mapper.inbound.InboundPushMapper;
import com.el.utils.Base64Util;
import com.el.utils.DateUtil;
import com.el.utils.HttpRequest;

/**
 * @author ELSIAN
 *
 */
@Service
public class InboundServiceImpl implements InboundService {
    
	Logger logger = Logger.getLogger(InboundServiceImpl.class);

	@Autowired
	protected InboundPushMapper inboundPushMapper;

	@Autowired
	private InboundBackMapper inboundBackMapper;

	@Autowired
	protected InboundPushDetailMapper inboundPushDetailMapper;

	@Autowired
	protected InboundF4211Mapper inboundF4211Mapper;

	@Autowired
	protected InboundF4311Mapper inboundF4311Mapper;

	@Value("${wms.ID}")
	private String wmsId;

	@Resource(name = "httpRequest")
	private HttpRequest httpRequest;

	@Resource(name = "wmsRequest")
	private WmsRequest wmsRequest;

	public void callWmsInboundPushInterface() {

		Map<String, Object> result = this.sendPostRequest();
		if (result != null) {
			
		WmsResult retWms = (WmsResult) result.get("result");
		List<InboundPush> list = (List<InboundPush>) result.get("list");
		Boolean success = retWms.isSuccess();
		if (success) {
			// update
			String flag = (list != null && list.size() > 0) ? list.get(0).getFlag() : "";
			if ("SO".equals(flag)) {
				// update F4211
				List<F4211> updList = new ArrayList<F4211>();
				for (InboundPush item : list) {
					if (item.getDetails() != null && item.getDetails().size() > 0) {
						for (InboundPushDetail detail : item.getDetails()) {
							F4211 row = new F4211();
							row.setSdkcoo(detail.getCo());
							row.setSddcto(detail.getDcto());
							row.setSddoco(detail.getDoco());
							row.setSdlnid(detail.getLnid().multiply(new BigDecimal(1000)));
							row.setSdlttr(detail.getNxtr());
							row.setSdnxtr("560");
							row.setSduser("WMS");
							row.setSdpid("Interface");
							row.setSdjobn("Server");
							row.setSdupmj(DateUtil.dateToJuLian(new Date()));
							// row.setSdtday(DateUtil.);
							updList.add(row);
						}
					}
				}

				this.updateF4211Status(updList);
			} else if ("OP".equals(flag)) {
				// update F4311
				List<F4311> updList = new ArrayList<F4311>();
				for (InboundPush item : list) {
					if (item.getDetails() != null && item.getDetails().size() > 0) {
						for (InboundPushDetail detail : item.getDetails()) {
							F4311 row = new F4311();
							row.setPdkcoo(detail.getCo());
							row.setPddcto(detail.getDcto());
							row.setPddoco(detail.getDoco());
							row.setPdsfxo("000");
							row.setPdlnid(detail.getLnid().multiply(new BigDecimal(1000)));
							row.setPdlttr(detail.getNxtr());
							row.setPdnxtr("560");
							row.setPduser("WMS");
							row.setPdpid("Interface");
							row.setPdjobn("Server");
							row.setPdupmj(DateUtil.dateToJuLian(new Date()));
							// row.setPdtday(DateUtil.);
							updList.add(row);
						}
					}
				}

				this.updateF4311Status(updList);
			}
		} else {
			// failed
		}
		}
	}

    private Map<String, Object> Base64Data() {
		List<InboundPush> list = inboundPushMapper.selectAllWithDetails();
		WmsData wms = new WmsData(WmsInterfaceType.RK_TYPE, wmsId, list);
		String data = wms.toJson();
		//data = Base64Util.encodeBase64(data);
		wmsRequest.setData(data);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("request", wmsRequest.toMap());
		map.put("list", list);
		return map;
	}

	private Map<String, Object> sendPostRequest() {

		try {

			Map<String, Object> data = this.Base64Data();
			Map<String, Object> request = (Map<String, Object>) data.get("request");
			String result = httpRequest.sendPost(request);

			// Test Begin
			// String result =
			// "{\"success\":true,\"code\":\"1001\",\"message\":\"非法调用：时间戳与当前服务器时间差异过大\"}";
			// result = Base64Util.encodeBase64(result);
			// Test End

			result = Base64Util.decodeBase64(result);
			WmsResult retWms = JSON.parseObject(result, WmsResult.class);
			Map<String, Object> retMap = new HashMap<String, Object>();
			retMap.put("result", retWms);
			retMap.put("list", data.get("list"));
			return retMap;
		} catch (Exception e) {
			e.getMessage();
			logger.error("调用WMS入库推送接口失败," + e.getMessage());
			return null;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.el.cmic.service.inbound.InboundService#getInboundPushList()
	 */
	public List<InboundPush> getInboundPushList() {
		List<InboundPush> list = inboundPushMapper.selectAll();
		if (list != null && !list.isEmpty()) {
			for (InboundPush row : list) {
				List<InboundPushDetail> details = inboundPushDetailMapper.selectAll();
				row.setDetails(details);
			}
		}
		return list;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.el.cmic.service.inbound.InboundService#getInboundPushListWithDetails(
	 * )
	 */
	public List<InboundPush> getInboundPushListWithDetails() {
		List<InboundPush> list = inboundPushMapper.selectAllWithDetails();
		return list;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.el.cmic.service.inbound.InboundService#getPushData()
	 */
	public String getPushData() {
		List<InboundPush> list = inboundPushMapper.selectAllWithDetails();
		return JSON.toJSONString(list, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullStringAsEmpty,
				SerializerFeature.WriteNullListAsEmpty, SerializerFeature.SortField);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.el.cmic.service.inbound.InboundService#updateF4211Status(java.util.
	 * List)
	 */
	@Override
	@Transactional
	public int updateF4211Status(List<F4211> updList) {
		// return f4211Mapper.updateStatusBatch(updList);
		int cnt = 0;
		if (updList != null && updList.size() > 0) {
			for (F4211 row : updList) {
				cnt += inboundF4211Mapper.updateStatus(row);
			}
		}
		return cnt;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.el.cmic.service.inbound.InboundService#updateF4311Status(java.util.
	 * List)
	 */
	@Override
	@Transactional
	public int updateF4311Status(List<F4311> updList) {
		// return f4311Mapper.updateStatusBatch(updList);
		int cnt = 0;
		if (updList != null && updList.size() > 0) {
			for (F4311 row : updList) {
				cnt += inboundF4311Mapper.updateStatus(row);
			}
		}
		return cnt;
	}

	@Override
	@Transactional
	public WmsResult acceptData(String data) {
		WmsResult wmsResult = new WmsResult(true, "0000", "成功");

		InboundPush inboundPush = JSON.parseObject(data, InboundPush.class);

		if (BillType.FLAG_OP.equals(inboundPush.getFlag())) {
			// 1采购入库、10调拨入库
			inboundBackMapper.insertF47071(inboundPush);
			for (InboundPushDetail detail : inboundPush.getDetails()) {
				inboundBackMapper.insertF47072(inboundPush, detail);
				for (InboundPushSerial serial : detail.getSerials()) {
					inboundBackMapper.insertFe8wms04(inboundPush, detail, serial);
				}
			}
		} else if (BillType.FLAG_SO.equals(inboundPush.getFlag())) {
			// 2 销退入库
			inboundBackMapper.insertF47131(inboundPush);
			for (InboundPushDetail detail : inboundPush.getDetails()) {
				inboundBackMapper.insertF47132(inboundPush, detail);
				for (InboundPushSerial serial : detail.getSerials()) {
					inboundBackMapper.insertFe8wms04(inboundPush, detail, serial);
				}
			}
			// 库存调整
			inboundBackMapper.insertF47121(inboundPush);
			for (InboundPushDetail detail : inboundPush.getDetails()) {
				inboundBackMapper.insertF47122(inboundPush, detail);
				for (InboundPushSerial serial : detail.getSerials()) {
					inboundBackMapper.insertFe8wms04(inboundPush, detail, serial);
				}
			}
		} else if (BillType.FLAG_IA.equals(inboundPush.getFlag())) {
			// 组装拆配入库
			for (InboundPushDetail detail : inboundPush.getDetails()) {
				inboundBackMapper.insertFe8wms05(inboundPush, detail);
				for (InboundPushSerial serial : detail.getSerials()) {
					inboundBackMapper.insertFe8wms04(inboundPush, detail, serial);
				}
			}
		}

		return wmsResult;

	}

}
