package com.el.cmic.service.ck;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.el.cmic.common.BillType;
import com.el.cmic.common.WmsInterfaceType;
import com.el.cmic.common.domain.WmsData;
import com.el.cmic.common.domain.WmsResult;
import com.el.cmic.domain.ck.CkData;
import com.el.cmic.domain.ck.CkOrder;
import com.el.cmic.domain.ck.CkOrderDtl;
import com.el.cmic.mapper.ck.CkMapper;
import com.el.utils.DateUtil;
import com.el.utils.HttpRequest;
import com.el.utils.Md5Util;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Base64Utils;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by Vincent on 2016/10/24.
 */
@Service
public class CkServiceImpl implements CkService {
    Logger logger = Logger.getLogger(CkServiceImpl.class);
    @Value("${wms.Url}")
    private String url;
    @Value("${wms.AppKey}")
    private String appKey;
    @Value("${wms.AppPassword}")
    private String appPassword;
    @Value("${wms.Ver}")
    private String ver;
    @Value("${wms.ID}")
    private String wmsId;
    @Autowired
    private CkMapper ckMapper;

    public void callWmsCkInterface() {
        //获取表头
        List<CkOrder> ckOrderList = ckMapper.selectAll();
        for (CkOrder ckOrder : ckOrderList
                ) {
            try {
                //根据表头获取明细
                List<CkOrderDtl> ckOrderDtlList = ckMapper.selectCkOrderDtlByDoco(ckOrder.getDoco(), ckOrder.getDcto(), ckOrder.getCo());
                ckOrder.setCkOrderDtlList(ckOrderDtlList);

                WmsData wmsData = new WmsData(WmsInterfaceType.CK_TYPE, wmsId);
                wmsData.setInterfaceData(ckOrder);
                //生成data数据
                String data = JSON.toJSONString(wmsData, SerializerFeature.WriteMapNullValue);

                //base64编码
                String encodeData = Base64Utils.encodeToString(data.getBytes("utf-8"));

                Map<String, Object> paramMap = new HashMap<String, Object>();
                paramMap.put("appkey", this.appKey);
                String timeStamp = DateUtil.getTimeStamp();
                paramMap.put("timestamp", timeStamp);
                paramMap.put("data", encodeData);
                String sign = Md5Util.getMD5(timeStamp, encodeData, appPassword);
                paramMap.put("sign", sign);
                paramMap.put("ver", ver);

                //调用请求
                String encodeResult = HttpRequest.sendPost(this.url, paramMap);

                byte[] bytes = Base64Utils.decodeFromString(encodeResult);
                String decodeResult = new String(bytes, "utf-8");

                afterResponse(decodeResult, ckOrderDtlList);
            } catch (Exception e) {
                e.getMessage();
                logger.error("调用入库推送接口失败," + e.getMessage());
            }
        }
    }

    public void afterResponse(String jsonString, List<CkOrderDtl> ckOrderDtlList) {
        WmsResult wmsResult = JSON.parseObject(jsonString, WmsResult.class);
        if (wmsResult.isSuccess()) {
            //更新状态
            update(ckOrderDtlList);
        } else {

        }
    }

    @Transactional
    public void update(List<CkOrderDtl> ckOrderDtlList) {
        for (CkOrderDtl ckOrderDtl : ckOrderDtlList
                ) {
            ckMapper.updateCk(ckOrderDtl);
        }
    }


}
