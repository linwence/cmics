package com.el.cmic.service.department.impl;

import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.xml.rpc.ServiceException;

import com.el.cmic.common.domain.Fe8spdlg;
import com.el.cmic.common.domain.Ve8spd0099;
import com.el.cmic.common.service.Ve8spd0099Service;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.el.cfg.domain.FE8SPD00;
import com.el.cmic.common.SpdInterfaceType;
import com.el.cmic.common.domain.SpdData;
import com.el.cmic.common.domain.SpdResult;
import com.el.cmic.domain.department.DepartmentData;
import com.el.cmic.mapper.department.DepartmentDataMapper;
import com.el.cmic.service.department.DepartmentDataService;
import com.el.cmic.service.validate.FE8SPD00Service;
import com.el.utils.AddSpaceUtil;
import com.el.utils.SpdClientService;

@Service
public class DepartmentDataServiceImpl implements DepartmentDataService {

    Logger logger = Logger.getLogger(DepartmentDataServiceImpl.class);

    @Autowired
    private DepartmentDataMapper departmentDataMapper;

    //@Value("${spd.ID}")
    //private String spdId;


    @Resource(name = "spdClientService")
    private SpdClientService spdClientService;

    @Autowired
    private FE8SPD00Service fE8SPD00Service;
    @Autowired
    private Ve8spd0099Service ve8spd0099ServiceImpl;

    /**
     * 部门基础数据推送  查询list
     *
     * @return
     */
    @Override
    public List<DepartmentData> selectDepartmentDatas() {
        return departmentDataMapper.selectDepartmentDatas();
    }

    /**
     * 更新 FE8SPD02  EV01 表的状态  Y  or  N
     */
    @Override
    @Transactional
    public void updateEv01(String status, String bmmcu, String bmco, String spdid) {
        departmentDataMapper.updateEv01(status, bmmcu, bmco, spdid);
    }


    /**
     * 部门基础数据推送    接口
     */
    @Override
    public void callSpdDepartmentInterface() {
        List<DepartmentData> arrayList = new ArrayList<DepartmentData>();
        arrayList = this.selectDepartmentDatas();
        for (DepartmentData departmentData : arrayList) {
            Ve8spd0099 ve8spd0099 = null;
            try {
                //List<Ve8spd0099> ve8spd0099List = ve8spd0099ServiceImpl.selectByCo(departmentData.getCo());
                ve8spd0099 = ve8spd0099ServiceImpl.selectBySpdId(departmentData.getSpdbs());
                // departmentData.setSpdbs(ve8spd0099.getSpdid());
                SpdData spdData = new SpdData(SpdInterfaceType.DEPARTMENTDATA_TYPE, departmentData.getSpdbs(), departmentData, "明细");
                //生成data数据
                String data = spdData.toJson();
                //System.out.println(data);
                //FE8SPD00 fE8SPD00 = fE8SPD00Service.selectByLsco( departmentData.getSend(),departmentData.getCo());
                Fe8spdlg fe8spdlg = new Fe8spdlg();
                fe8spdlg.setLge8cgdd(departmentData.getMcu());//订单号
                fe8spdlg.setLge8qglx("");//订单类型
                fe8spdlg.setLge8erpid(departmentData.getSend());//配送机构编码
                fe8spdlg.setLge8rzlx("INFO");//日志类型
                fe8spdlg.setLge8rzfx("TOSPD");//日志方向
                fe8spdlg.setLge8jkmc(SpdInterfaceType.DEPARTMENTDATA_TYPE);//接口名称
                fe8spdlg.setLge8rznr(data);//日志内容
                fe8spdlg.setLge8spdid(departmentData.getSpdbs());//SPD系统标识
                fe8spdlg.setLge8spdurl(ve8spd0099.getSpdurl());//SPD URL

                //调用webservice提供的接口
                SpdResult spdResult = spdClientService.callSpdWebService(data, ve8spd0099.getAppkey(), ve8spd0099.getApppassword(),
                        ve8spd0099.getSpdurl(), ve8spd0099.getSpdnamespace(), ve8spd0099.getSpdver(), fe8spdlg);
                //System.out.print("接口测试结果:");
                //System.out.println(spdResult);
                afterResponse(departmentData, spdResult);
            } catch (RemoteException ex) {
                ex.printStackTrace();
                logger.error("调用[" + SpdInterfaceType.DEPARTMENTDATA_TYPE + "]失败,无法访问webservice;[url]"
                        + ve8spd0099.getSpdurl() + ";部门编码[" + departmentData.getMcu() + "];[错误信息]:" + ex.getMessage());
            } catch (UnsupportedEncodingException ex) {
                ex.printStackTrace();
                logger.error("调用[" + SpdInterfaceType.DEPARTMENTDATA_TYPE + "]失败,不支持的编码;部门编码[" + departmentData.getMcu() + "];[错误信息]:" + ex.getMessage());
            } catch (ServiceException ex) {
                ex.printStackTrace();
                logger.error("调用[" + SpdInterfaceType.DEPARTMENTDATA_TYPE + "]失败,webservice服务异常;[url]"
                        + ve8spd0099.getSpdurl() + ";部门编码[" + departmentData.getMcu() + "];[错误信息]:" + ex.getMessage());

            } catch (MalformedURLException ex) {
                ex.printStackTrace();
                logger.error("调用[" + SpdInterfaceType.DEPARTMENTDATA_TYPE + "]失败,Url地址异常;[url]"
                        + ve8spd0099.getSpdurl() + ";部门编码[" + departmentData.getMcu() + "];[错误信息]:" + ex.getMessage());

            } catch (Exception ex) {
                ex.printStackTrace();
                logger.error("调用[" + SpdInterfaceType.DEPARTMENTDATA_TYPE + "]失败，" +
                        "部门编码[" + departmentData.getMcu() + "],[错误信息]:" + ex.getMessage());

            }


        }

    }


    public void afterResponse(DepartmentData departmentData, SpdResult spdResult) {
        String status = "Y";
        //接口调用不成功  更新状态
        if (!spdResult.isSuccess()) {
            status = "E";
        }
        //更新字段  Nchar  字段左右补空格
        updateEv01(status, departmentData.getMcu(), departmentData.getCo(), departmentData.getSpdbs());
    }

}
