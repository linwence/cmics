package com.el.cmic.service.ckcancel;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.el.cmic.common.WmsInterfaceType;
import com.el.cmic.common.domain.WmsData;
import com.el.cmic.common.domain.WmsResult;
import com.el.cmic.domain.ck.CkOrderDtl;
import com.el.cmic.domain.ckcancel.CkCancelOrder;
import com.el.cmic.domain.ckcancel.CkCancelOrderDtl;
import com.el.cmic.mapper.ckcancel.CkCancelMapper;
import com.el.utils.DateUtil;
import com.el.utils.HttpRequest;
import com.el.utils.Md5Util;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Base64Utils;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by Vincent on 2016/10/29.
 * 出库取消推送服务实现
 */
public class CkCancelServiceImpl implements CkCancelService {
    Logger logger = Logger.getLogger(CkCancelServiceImpl.class);
    @Value("${wms.ID}")
    private String wmsId;
    @Value("${wms.Url}")
    private String url;
    @Value("${wms.AppKey}")
    private String appKey;
    @Value("${wms.AppPassword}")
    private String appPassword;
    @Value("${wms.Ver}")
    private String ver;
    @Autowired
    private CkCancelMapper ckCancelMapper;

    @Override
    public void callWmsCkCancelInterface() {
        List<CkCancelOrder> ckCancelOrderList = ckCancelMapper.selectCkCancelOrderList();
        for (CkCancelOrder ckCancelOrder : ckCancelOrderList
                ) {
            try {
                List<CkCancelOrderDtl> ckCancelOrderDtlList = ckCancelMapper.selectCkCancelOrderDtlList(ckCancelOrder.getKcco(),
                        ckCancelOrder.getDoco(), ckCancelOrder.getDcto());
                ckCancelOrder.setCkCancelOrderDtlList(ckCancelOrderDtlList);
                WmsData wmsData = new WmsData(WmsInterfaceType.CK_CANCEL_TYPE, wmsId);
                wmsData.setInterfaceData(ckCancelOrder);
                //生成data数据
                String data = JSON.toJSONString(wmsData, SerializerFeature.WriteMapNullValue);

                //base64编码
                String encodeData = Base64Utils.encodeToString(data.getBytes("utf-8"));

                Map<String, Object> paramMap = new HashMap<String, Object>();
                paramMap.put("appkey", this.appKey);
                String timeStamp = DateUtil.getTimeStamp();
                paramMap.put("timestamp", timeStamp);
                paramMap.put("data", encodeData);
                String sign = Md5Util.getMD5(timeStamp, encodeData, appPassword);
                paramMap.put("sign", sign);
                paramMap.put("ver", ver);

                //调用请求
                String encodeResult = HttpRequest.sendPost(this.url, paramMap);
                byte[] bytes = Base64Utils.decodeFromString(encodeResult);
                String decodeResult = new String(bytes, "utf-8");

                //处理接收结果
                afterResponse(decodeResult, ckCancelOrderDtlList);
            } catch (Exception e) {
                e.getMessage();
                logger.error("调用WMS出库取消推送接口失败," + e.getMessage());
            }
        }

    }

    public void afterResponse(String jsonString, List<CkCancelOrderDtl> ckCancelOrderDtlList) {
        WmsResult wmsResult = JSON.parseObject(jsonString, WmsResult.class);
        String status = "Y";
        if (!wmsResult.isSuccess()) {
            //更新状态
            status = "E";
        }
        update(ckCancelOrderDtlList, status);
    }

    @Transactional
    public void update(List<CkCancelOrderDtl> ckCancelOrderDtlList, String status) {
        for (CkCancelOrderDtl ckCancelOrderDtl : ckCancelOrderDtlList
                ) {
            ckCancelMapper.updateCkCancel(ckCancelOrderDtl, status);
        }
    }
}
