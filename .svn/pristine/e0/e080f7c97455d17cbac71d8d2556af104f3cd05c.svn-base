/**
 * 
 */
package com.el.cmic.service.inbound;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.el.cfg.domain.F4211;
import com.el.cfg.domain.F4311;
import com.el.cmic.common.BillType;
import com.el.cmic.common.WmsInterfaceType;
import com.el.cmic.common.domain.WmsData;
import com.el.cmic.common.domain.WmsRequest;
import com.el.cmic.common.domain.WmsResult;
import com.el.cmic.domain.inbound.InboundPush;
import com.el.cmic.domain.inbound.InboundPushDetail;
import com.el.cmic.domain.inbound.InboundPushSerial;
import com.el.cmic.mapper.inbound.InboundBackMapper;
import com.el.cmic.mapper.inbound.InboundF4211Mapper;
import com.el.cmic.mapper.inbound.InboundF4311Mapper;
import com.el.cmic.mapper.inbound.InboundPushDetailMapper;
import com.el.cmic.mapper.inbound.InboundPushMapper;
import com.el.utils.Base64Util;
import com.el.utils.DateUtil;
import com.el.utils.HttpRequest;

/**
 * @author ELSIAN
 *
 */
@Service
public class InboundServiceImpl implements InboundService {

	Logger logger = Logger.getLogger(InboundServiceImpl.class);

	@Autowired
	protected InboundPushMapper inboundPushMapper;

	@Autowired
	private InboundBackMapper inboundBackMapper;

	@Autowired
	protected InboundPushDetailMapper inboundPushDetailMapper;

	@Autowired
	protected InboundF4211Mapper inboundF4211Mapper;

	@Autowired
	protected InboundF4311Mapper inboundF4311Mapper;

	@Value("${wms.ID}")
	private String wmsId;

	@Resource(name = "httpRequest")
	private HttpRequest httpRequest;

	@Resource(name = "wmsRequest")
	private WmsRequest wmsRequest;

	public void callWmsInboundPushInterface() {

		try {

			List<InboundPush> list = inboundPushMapper.selectAllWithDetails();
			for (InboundPush item : list) {
				WmsData wms = new WmsData(WmsInterfaceType.RK_TYPE, wmsId, item);
				String data = wms.toJson();
				wmsRequest.setData(data);
				String result = httpRequest.sendPost(wmsRequest.toMap());

				this.afterResponse(result, item);
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("调用WMS入库推送接口失败," + e.getMessage());
		}
	}

	private boolean afterResponse(String result, InboundPush item) {
		result = Base64Util.decodeBase64(result);
		WmsResult retWms = JSON.parseObject(result, WmsResult.class);
		Boolean success = retWms.isSuccess();
		if (success) {
			// update
			String flag = (item != null) ? item.getFlag() : "";
			if (BillType.FLAG_SO.equals(flag)) {

				// update F4211
				if (item.getDetails() != null && item.getDetails().size() > 0) {
					this.updateF4211StatusList(item.getDetails());
				}
			} else if (BillType.FLAG_OP.equals(flag)) {

				// update F4311
				if (item.getDetails() != null && item.getDetails().size() > 0) {
					this.updateF4311StatusList(item.getDetails());
				}
			}
		} else {
			// failed
		}
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.el.cmic.service.inbound.InboundService#getInboundPushList()
	 */
	public List<InboundPush> getInboundPushList() {
		List<InboundPush> list = inboundPushMapper.selectAll();
		if (list != null && !list.isEmpty()) {
			for (InboundPush row : list) {
				List<InboundPushDetail> details = inboundPushDetailMapper.selectAll();
				row.setDetails(details);
			}
		}
		return list;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.el.cmic.service.inbound.InboundService#getInboundPushListWithDetails(
	 * )
	 */
	public List<InboundPush> getInboundPushListWithDetails() {
		List<InboundPush> list = inboundPushMapper.selectAllWithDetails();
		return list;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.el.cmic.service.inbound.InboundService#getPushData()
	 */
	public String getPushData() {
		List<InboundPush> list = inboundPushMapper.selectAllWithDetails();
		return JSON.toJSONString(list, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullStringAsEmpty,
				SerializerFeature.WriteNullListAsEmpty, SerializerFeature.SortField);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.el.cmic.service.inbound.InboundService#updateF4211Status(InboundPushDetail)
	 */
	@Override
	@Transactional
	public int updateF4211Status(InboundPushDetail row) {
		return inboundPushMapper.updateF4211Status(row);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.el.cmic.service.inbound.InboundService#updateF4211Status(java.util.
	 * List)
	 */
	@Override
	@Transactional
	public int updateF4211StatusList(List<InboundPushDetail> updList) {
		// return f4211Mapper.updateStatusBatch(updList);
		int cnt = 0;
		if (updList != null && updList.size() > 0) {
			for (InboundPushDetail row : updList) {
				cnt += inboundPushMapper.updateF4211Status(row);
			}
		}
		return cnt;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.el.cmic.service.inbound.InboundService#updateF4311Status(InboundPushDetail)
	 */
	@Override
	@Transactional
	public int updateF4311Status(InboundPushDetail row) {
		return inboundPushMapper.updateF4311Status(row);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.el.cmic.service.inbound.InboundService#updateF4311StatusList(java.util.
	 * List)
	 */
	@Override
	@Transactional
	public int updateF4311StatusList(List<InboundPushDetail> updList) {
		// return f4311Mapper.updateStatusBatch(updList);
		int cnt = 0;
		if (updList != null && updList.size() > 0) {
			for (InboundPushDetail row : updList) {
				cnt += inboundPushMapper.updateF4311Status(row);
			}
		}
		return cnt;
	}

	@Override
	@Transactional
	public WmsResult acceptData(String data) {
		WmsResult wmsResult = new WmsResult(true, "0000", "成功");

		InboundPush inboundPush = JSON.parseObject(data, InboundPush.class);

		if (BillType.FLAG_OP.equals(inboundPush.getFlag())) {
			// 1采购入库、10调拨入库
			int cnt = inboundBackMapper.insertF47071(inboundPush);
			for (InboundPushDetail detail : inboundPush.getDetails()) {
				inboundBackMapper.insertF47072(inboundPush, detail);
				for (InboundPushSerial serial : detail.getSerials()) {
					inboundBackMapper.insertFe8wms04(inboundPush, detail, serial);
				}
			}
		} else if (BillType.FLAG_SO.equals(inboundPush.getFlag())) {
			// 2 销退入库
			inboundBackMapper.insertF47131(inboundPush);
			for (InboundPushDetail detail : inboundPush.getDetails()) {
				inboundBackMapper.insertF47132(inboundPush, detail);
				for (InboundPushSerial serial : detail.getSerials()) {
					inboundBackMapper.insertFe8wms04(inboundPush, detail, serial);
				}
			}
			// 库存调整
			inboundBackMapper.insertF47121(inboundPush);
			for (InboundPushDetail detail : inboundPush.getDetails()) {
				inboundBackMapper.insertF47122(inboundPush, detail);
//				for (InboundPushSerial serial : detail.getSerials()) {
//					inboundBackMapper.insertFe8wms04(inboundPush, detail, serial);
//				}
			}
		} else if (BillType.FLAG_IA.equals(inboundPush.getFlag())) {
			// 组装拆配入库
			for (InboundPushDetail detail : inboundPush.getDetails()) {
				inboundBackMapper.insertFe8wms05(inboundPush, detail);
				for (InboundPushSerial serial : detail.getSerials()) {
					inboundBackMapper.insertFe8wms04(inboundPush, detail, serial);
				}
			}
		}

		return wmsResult;

	}

}
